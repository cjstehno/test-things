plugins {
    id 'java-library'
    id 'com.github.hierynomus.license' version '0.16.1'
    id 'jacoco'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.asciidoctor.jvm.gems' version '3.3.2'
    id 'com.stehno.gradle.webpreview' version '0.3.0'
    id 'maven-publish'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'signing'
}

group = 'io.github.cjstehno'
version = '0.0.2'

sourceCompatibility = 17
targetCompatibility = 17

repositories {
    mavenCentral()
}

dependencies {
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    implementation 'org.slf4j:slf4j-api:2.0.3'
    implementation 'ch.qos.logback:logback-classic:1.4.4'

    implementation 'org.apache.commons:commons-lang3:3.12.0'

    api 'org.hamcrest:hamcrest:2.2'

    // this is required for the test extension
    compileOnly "org.junit.jupiter:junit-jupiter-api:$junitVersion"

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.14.0'


    // Test dependencies

    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'
    testImplementation 'com.h2database:h2:2.1.214'
}

test {
    useJUnitPlatform()
    maxParallelForks = Math.min(Runtime.runtime.availableProcessors(), 8)
}


jacocoTestReport {
    dependsOn test
}

license {
    header = file('config/license_header.txt')

    ignoreFailures false

    ext.year = Calendar.instance.get(Calendar.YEAR)

    excludes(['**/*.txt', '**/*.dtd', '**/*.xml', '**/*.ent', '**/*.jks', '**/*.jpg', '**/*.json'])
}

asciidoctor {
    baseDir file('src/docs/asciidoc')
    options doctype: 'book'
    attributes(
        'source-highlighter': 'rouge',
        'coderay-linenums-mode': 'table',
        icon: 'font',
        linkattrs: true,
        encoding: 'utf-8'
    )
}

webPreview {
    resourceDir = file('build/site')
}

task site(dependsOn: ['build', 'javadoc', 'jacocoTestReport', 'asciidoctor']) {
    doLast {
        def vars = [
            project_version: project.version,
            year           : Calendar.instance.get(Calendar.YEAR)
        ]

        mkdir 'build/site'

        copy {
            from 'src/site'
            into 'build/site'
            include '**/*.html'
            expand vars
        }

        copy {
            from 'src/site'
            into 'build/site'
            include '**/css/**'
            include '**/js/**'
            include '**/img/**'
        }

        // Copy the coverage reports
        copy {
            from 'build/reports/jacoco/test/html'
            include '**/**'
            into 'build/site/jacoco'
        }

        // Copy the test reports
        copy {
            from 'build/reports/tests/test'
            include '**/**'
            into 'build/site/tests'
        }

        // Copy the javadocs
        copy {
            from 'build/docs/javadoc'
            include '**/**'
            into 'build/site/javadoc'
        }

        // copy the generated user-guide
        copy {
            from 'build/docs/asciidoc'
            include 'user_guide.html'
            into 'build/site/docs'
        }
    }
}


task sourcesJar(type: Jar) {
    description = 'Creates sources jar.'
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    description = 'Creates API documentation jar.'
    archiveClassifier.set('javadoc')
    from javadoc
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        testThings(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId 'test-things'
            version project.version
            pom.withXml {
                def root = asNode()

                // remove test dependencies
                root.dependencies.removeAll { dep -> dep.scope == 'test' }

                root.appendNode('description', 'Utilities for unit testing.')
                root.appendNode('name', 'test-things')
                root.appendNode('url', 'https://cjstehno.github.io/test-things')

                def licenseNode = root.appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenseNode.appendNode('distribution', 'repo')

                def developersNode = root.appendNode('developers').appendNode('developer')
                developersNode.appendNode('id', 'cjstehno')
                developersNode.appendNode('name', 'Christopher J Stehno')
                developersNode.appendNode('email', 'chris.stehno@gmail.com')

                def scmNode = root.appendNode('scm')
                scmNode.appendNode('connection', 'scm:git:git@github.com:cjstehno/test-things.git')
                scmNode.appendNode('developerConnection', 'scm:git:git@github.com:cjstehno/test-things.git')
                scmNode.appendNode('url', 'https://github.com/cjstehno/test-things')
            }
        }
    }
    repositories {
        maven {
            name = 'OSSRH'
            setUrl('https://s01.oss.sonatype.org/service/local/staging/deploy/maven2')
            credentials {
                username = findProperty('ossrhUser') ?: ''
                password = findProperty('ossrhPass') ?: ''
            }
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.testThings
}


